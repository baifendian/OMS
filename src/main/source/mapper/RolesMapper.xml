<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bfd.oms.dao.RolesMapper" >
  <resultMap id="BaseResultMap" type="com.bfd.oms.model.Roles" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_key" property="roleKey" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    role_id, role_name, role_key, description, status, create_time, update_time, create_user, 
    update_user
  </sql>
  <select id="selectByPrimaryKey" resultType="java.util.Map" parameterType="java.lang.Integer" >
  SELECT 
   	u.user_id,
	u.user_name,
	u.user_nickname,
	u.user_realname,
	u.reg_time,
	u.last_logintime,
	u.to_bfd_time,
	u.remind_time,
	r.role_id,
	r.role_name,
	r.role_key,
	r.description,
	r. STATUS,
	r.create_time,
	r.update_time,
	r.create_user,
	r.update_user
    from user u
    left join user_role ur on ur.user_id = u.user_id
    LEFT JOIN roles r on r.role_id = ur.role_id
    where u.user_id = #{userId,jdbcType=INTEGER}
  </select>
  
  <select id="PageRoles" resultType="java.util.Map" parameterType="java.util.Map" >
  SELECT 
   	u.user_id,
	u.user_name,
	u.user_nickname,
	u.user_realname,
	u.reg_time,
	u.last_logintime,
	u.to_bfd_time,
	u.remind_time,
	r.role_id,
	r.role_name,
	r.role_key,
	r.description,
	r. STATUS,
	r.create_time,
	r.update_time,
	r.create_user,
	r.update_user
    from  user u
    left join user_role ur on ur.user_id = u.user_id 
    LEFT JOIN roles r on r.role_id = ur.role_id
    where  r.status = 1 and u.status=1
    <if test="userName != null and userName != ''">
       and u.user_name like CONCAT('%',#{userName},'%')
    </if> 
  </select>
  
  <select id="findlist" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from roles where status=1
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from roles
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bfd.oms.model.Roles" >
    insert into roles (role_id, role_name, role_key, 
      description, status, create_time, 
      update_time, create_user, update_user
      )
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleKey,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bfd.oms.model.Roles" >
    insert into roles
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="roleKey != null" >
        role_key,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleKey != null" >
        #{roleKey,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.bfd.oms.model.Roles" >
    update roles
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleKey != null" >
        role_key = #{roleKey,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bfd.oms.model.Roles" >
    update roles
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_key = #{roleKey,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
</mapper>